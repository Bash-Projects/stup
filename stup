#!/bin/bash
# SOURCE: https://github.com/iridakos/stup
# MIT License
#
# Copyright (c) 2020 Lazarus Lazaridis
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#############
# Variables #
#############

# TODO: remove unused
ITEMS=()
TEXT_BOLD=$(tput bold)
TEXT_BLACK=$(tput setaf 0)
TEXT_RED=$(tput setaf 1)
TEXT_GREEN=$(tput setaf 2)
TEXT_YELLOW=$(tput setaf 3)
TEXT_LIME_YELLOW=$(tput setaf 190)
TEXT_POWDER_BLUE=$(tput setaf 153)
TEXT_BLUE=$(tput setaf 4)
TEXT_MAGENTA=$(tput setaf 5)
TEXT_CYAN=$(tput setaf 6)
TEXT_WHITE=$(tput setaf 7)
TEXT_BRIGHT=$(tput bold)
TEXT_NORMAL=$(tput sgr0)
TEXT_BLINK=$(tput blink)
TEXT_REVERSE=$(tput smso)
TEXT_UNDERLINE=$(tput smul)
TEXT_NORMAL=$(tput sgr0)

# Stup entry point
stup()
{
  resolve_configuration_file
  parse_options "$@"

  if [ -z "$COMMAND" ]; then
    COMMAND="show"
  fi

  if [ "$COMMAND" != "configure" ]; then
    ensure_configured
    load_configuration
  fi

  execute
}

######################
# Command executions #
######################

# Issues the execution of the proper command
execute()
{
  case "$COMMAND" in
    show)
      execute_show
      ;;
    log)
      execute_log
      ;;
    configure)
      execute_configure
      ;;
    add_repository)
      execute_add_repository
      ;;
    set_repository_description)
      execute_set_repository_description
      ;;
    *)
      print_error "Can't execute command: '$COMMAND'"
      exit 1
      ;;
  esac
}

# Shows the entries logged for a specific date
execute_show()
{
  if [[ $1 ]]; then
    AT="$1"
  fi

  resolve_date
  extract_date_components

  if [[ $REPOSITORY ]]; then
    target_file=$(resolve_target_file "$REPOSITORY")
    if [ -f "$target_file" ]; then
      print_info "Displaying items of repository $REPOSITORY logged for $(success_color "$(display_date "$AT")").\n"

      description_file="$REPOSITORIES_ROOT/$REPOSITORY/description.md"

      if [ -f "$description_file" ]; then
        result=$(cat $description_file)
        echo $(emphasize "$result")
      fi

      cat $target_file
    else
      print_warning "No entries for repository $REPOSITORY. Searched in $target_file"
    fi
  else
    load_repositories

    # Check if there are any entries for the given date
    local entries_found=false
    for repository in "${REPOSITORIES[@]}"; do
      local target_file=$(resolve_target_file "$repository")

      if [ -f "$target_file" ]; then
        entries_found=true
        break
      fi
    done

    if [ $entries_found == true ]; then
      print_info "Displaying items logged for $(display_date "$AT").\n"

      for repository in "${REPOSITORIES[@]}"; do
        description_file="$REPOSITORIES_ROOT/$repository/description.md"

        if [ -f "$description_file" ]; then
          result=$(cat $description_file)
          echo $(emphasize "$result")
        else
          echo "# Items of repository: $repository"
        fi

        echo ""

        local target_file=$(resolve_target_file "$repository")

        if [ -f "$target_file" ]; then
          cat "$target_file"
        else
          echo -e "None."
        fi

        echo ""
      done
    else
      print_warning "No entries found for $(display_date $AT) in any repository."
      read -e -p "Do you want to retrieve the last entries logged with stup? Type y|Y|yes|Yes or anything else to exit: " search_last_entries

      case "$search_last_entries" in
        y|Y|yes|Yes)
          resolve_last_at
          execute_show "$AT"
          ;;
        *)
          exit 0
      esac
    fi
  fi
}

# Logs items to a specific date
execute_log()
{
  resolve_required_repository
  resolve_date
  extract_date_components

  target_file="$(resolve_target_file $REPOSITORY)"

  if ! [ -f "$target_file" ]; then
    mkdir -p "${target_file%/*}" && touch "$target_file"
  fi

  local number_of_items=${#ITEMS[@]}

  if [ $number_of_items -eq 0 ]; then
    print_error "You haven't specified any items to add."
    print_hint "Use the --item flag."
    exit 1
  fi

  for item in "${ITEMS[@]}"; do
    echo "- $item" >> $target_file
  done

  echo -e "Successfully added $(emphasize "$number_of_items") items in repository $(emphasize "$REPOSITORY") for $(display_date $AT)"
}

# Updates the description of a given repository
execute_set_repository_description()
{
  if [ -z "$REPOSITORY_DESCRIPTION" ]; then
    echo "Missing required argument --repository-description"
    exit 1
  fi

  if [ -z "$REPOSITORY" ]; then
    echo "No repository specified. Changing the default: $DEFAULT_REPOSITORY"
    REPOSITORY="$DEFAULT_REPOSITORY"
  fi

  echo -e "$REPOSITORY_DESCRIPTION" > "$REPOSITORIES_ROOT/$REPOSITORY/description.md"
}

# Adds a repository
execute_add_repository()
{
  if [ -z "$REPOSITORY_NAME" ]; then
    echo "Missing required argument --repository-name"
    exit 1
  fi

  if [ -d "$REPOSITORIES_ROOT/$REPOSITORY_NAME" ]; then
    echo "Repository '$REPOSITORY_NAME' already exists."
  else
    mkdir -p "$REPOSITORIES_ROOT/$REPOSITORY_NAME"
  fi

  if ! [ -z "$REPOSITORY_DESCRIPTION" ]; then
    echo "$REPOSITORY_DESCRIPTION" > "$REPOSITORIES_ROOT/$REPOSITORY_NAME/description.md"
  fi
}

execute_configure()
{
  if ! [ -f "$CONFIG_FILE" ]; then
    fist_time=true
    touch -a "$CONFIG_FILE"
    echo -e "repositories_root=$HOME/stup\ndefault_repository=main\n" >> $CONFIG_FILE
  fi

  load_configuration

  wizard "repositories_root"
  wizard "default_repository"

  store_configuration

  exit 0
}

##########################
# Command helper methods #
##########################

# Ensures sput is configured
ensure_configured()
{
  if ! [ -f "$CONFIG_FILE" ]; then
    print_error "Failed to find configuration file: $CONFIG_FILE"
    print_hint "Have you configured stup? If not, use: stup configure"
    exit 1
  fi

  load_configuration

  if [ -z "$REPOSITORIES_ROOT" ]; then
    print_error "Invalid stup configuration - missing repositories root"
    print_hint "Use \"stup --configure\" to re-configure stup"
    exit 1
  fi

  if [ -z "$DEFAULT_REPOSITORY" ]; then
    print_error "Invalid stup configuration - missing default repository"
    print_hint "Use \"stup --configure\" to re-configure stup"
    exit 1
  fi

  if ! [ -d "$REPOSITORIES_ROOT" ]; then
    print_error "Invalid stup configuration - repositories root directory does not exist"
    print_hint "Use \"stup --configure\" to re-configure stup"
    exit 1
  fi
}

# Parses the user's options
parse_options()
{
  while [[ $# -gt 0 ]]; do
    case "$1" in
      today|tomorrow|yesterday)
        AT="$1"
        shift
        ;;
      log)
        COMMAND="log"
        shift
        ;;
      configure)
        COMMAND="configure"
        shift
        ;;
      show)
        COMMAND="show"
        shift
        ;;
      @|-@|--at)
        AT="$2"
        shift 2
        ;;
      add-repository)
        COMMAND="add_repository"
        shift 1
        ;;
      set-repository-description)
        COMMAND="set_repository_description"
        shift 1
        ;;
      --repository-name)
        REPOSITORY_NAME="$2"
        shift 2
        ;;
      --repository-description)
        REPOSITORY_DESCRIPTION="$2"
        shift 2
        ;;
      -r|--repository)
        load_configuration
        load_repositories
        
        if [[ ! " ${REPOSITORIES[@]} " =~ " ${2} " ]]; then
          error "Repository $2 does not exist."
          exit 1
        fi

        REPOSITORY="$2"
        shift 2
        ;;
      -i|--item)
        ITEMS+=("$2")
        shift 2
        ;;
      --configure)
        COMMAND="configure"
        shift
        ;;
      --) # end argument parsing
        shift
        break
        ;;
      -*|--*=) # unsupported flags
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
      *)
        echo "Error: Unsupported command \"$1\"" >&2
        exit 1
        ;;
    esac
  done
}

# Starts the configuration wizard
wizard()
{
  case "$1" in
    repositories_root)
      if [ -z "$REPOSITORIES_ROOT" ]; then
        REPOSITORIES_ROOT="$HOME/stup"
      fi

      if [[ "$2" ]]; then
        print_error "$2"
      else
        print_info "Please specify which directory will be the root of all the repositories stup will be using to store your standup notes."
        print_info "By default, the logs will be stored in $REPOSITORIES_ROOT."
      fi

      read -e -p ">>> Type d/D/default to use the default location or fill in your desired destination: " new_repository_root
      new_repository_root=$(echo -e "${new_repository_root}" | tr -d '[:space:]')
      
      if [[ -z "$new_repository_root" ]]; then
        wizard "repositories_root" "I couldn't understand your selection."
        return
      fi
      
      case "$new_repository_root" in
        d|D|default)
          print_success "Keeping default directory."
          mkdir -p "$REPOSITORIES_ROOT"
          ;;
        *)
          {
            new_repository_root="${new_repository_root/#\~/$HOME}"
            new_repository_root=$(readlink -f "$new_repository_root")
            
            mkdir -p "$new_repository_root"

            new_repository_root=$(builtin cd "$new_repository_root" 2>/dev/null && pwd)
            
            if [[ -d "$new_repository_root" ]]; then
              REPOSITORIES_ROOT="$new_repository_root"
            else
              wizard "repositories_root" "Failed to create the new repository root."
            fi
          } || {
            wizard "repositories_root" "Failed to create the new repository root, make sure it's a valid path."
          }
          ;;
      esac
      ;;
    default_repository)
      if [ -z "$DEFAULT_REPOSITORY" ]; then
        DEFAULT_REPOSITORY="main"
      fi
      
      if [[ "$2" ]]; then
        print_error "$2"
      else
        print_info "Please specify which repository will be your default one (if you have many)."
        print_info "The default repository is currently set to \"$DEFAULT_REPOSITORY\"."
      fi

      read -e -p ">>> Type d/D/default to keep the default or fill in a new one (ex. review): " new_default_repository
      new_default_repository=$(echo -e "${new_default_repository}" | tr -d '[:space:]')

      if [[ -z "$new_default_repository" ]]; then
        wizard "default_repository" "I couldn't understand your selection."
        return
      fi

      case "$new_default_repository" in
        d|D|default)
          print_success "Default repository still set to \"$DEFAULT_REPOSITORY\"."
          ;;
        *)
          {
            mkdir -p "$REPOSITORIES_ROOT/$new_default_repository"
            
            if [[ -d "$REPOSITORIES_ROOT/$new_default_repository" ]]; then
              DEFAULT_REPOSITORY="$new_default_repository"
              echo "Repository set to $DEFAULT_REPOSITORY"
            else
              wizard "default_repository" "Failed to create the default repository's directory. Make sure the name is also a valid directory name."
            fi
          } || {
            wizard "default_repository" "Failed to create the directory for the new default repository. Make sure the name is also a valid directory name."
          }
          ;;
      esac
      ;;
  esac
}

# Loads the sput configuration
load_configuration()
{
  if [[ $CONFIGURATION_LOADED == true ]]; then
    return
  fi

  if [ -z CONFIG_FILE ]; then
    print_error "Configuration file not found."
    print_hint "Have you configured stup?"
    exit 1
  fi

  while IFS='=' read variable_name variable_value
  do
    if [[ $variable_value ]]
    then
      handle_configuration_variable "$variable_name" "$variable_value"
    fi
  done < $CONFIG_FILE

  CONFIGURATION_LOADED=true
}

# Loads the configuration variables
handle_configuration_variable()
{
  case "$1" in
    repositories_root)
      REPOSITORIES_ROOT="$2"
      ;;
    default_repository)
      DEFAULT_REPOSITORY="$2"
      ;;
  esac
}

# Resolves the location of the sput configuration file
resolve_configuration_file()
{
  CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/stup.conf"
}

# Stores configuration of sput
store_configuration()
{
  echo -e "repositories_root=$REPOSITORIES_ROOT\ndefault_repository=$DEFAULT_REPOSITORY\n" > $CONFIG_FILE
}

# Properly sets the current repository to the default one unless already specified
resolve_required_repository()
{
  if [[ -z "$REPOSITORY" ]]; then
    REPOSITORY="$DEFAULT_REPOSITORY"
  fi
}

# Properly sets year, month and day based on the specified AT variable
# TODO: print error on invalid date format
extract_date_components()
{
  case "$AT" in
    today|yesterday|tomorrow)
      YEAR=$(date -d "$AT" +"%Y")
      MONTH=$(date -d "$AT" +"%m")
      DAY=$(date -d "$AT" +"%d")
      ;;
    *)
      IFS='-' read -ra parts <<< "$AT"
      YEAR="${parts[0]}"
      MONTH="${parts[1]}"
      DAY="${parts[2]}"
      ;;
  esac
}

# Loads the currently registered repositories
load_repositories()
{
  if [[ $REPOSITORIES_LOADED == true ]]; then
    return
  fi

  REPOSITORIES=()
  directories=($REPOSITORIES_ROOT/*)
  for dir in "${directories[@]}"; do
    if [ -d $dir ]; then
      REPOSITORIES+=("$(basename $dir)")
    fi
  done

  REPOSITORIES_LOADED=true
}

# Sets the default date per action if not specified by the user
resolve_date()
{
  if [ ! -z "$AT" ]; then
    return
  fi

  case "$COMMAND" in
    show)
      AT="yesterday"
      ;;
    log)
      AT="today"
      ;;
    *)
      echo "[WARN] don't know how to handle default date for command: $COMMAND"
      ;;
  esac
}

# Retrieves the last date a log was issued before a specified date
resolve_last_at()
{
  local year=$YEAR,month=$MONTH,day=$DAY,last_at=""
  local target_path=""
  local current_target_file=$(basename $(resolve_target_file))
  local winner=""
  local current_at="$AT"
  AT=""

  # TODO: optimize this search, it can get too big with the increase of entries
  ########################
  # search in month days #
  ########################
  if [[ $REPOSITORY ]]; then
    target_path="$REPOSITORY/$YEAR/$MONTH"
  else
    target_path="*/$YEAR/$MONTH"
  fi

  while IFS= read -r filename; do
    if [[ "$current_target_file" > "$filename" ]]; then
      AT="${filename%.*}"
      return
    fi
  done < <(find $REPOSITORIES_ROOT -path "$target_path/*.md" -printf "%f\n" | sort -r)

  #########################
  # search in year months #
  #########################
  if [[ $REPOSITORY ]]; then
    target_path="$REPOSITORY/$YEAR/*"
  else
    target_path="*/$YEAR/*"
  fi

  while IFS= read -r filename; do
    if [[ "$current_target_file" > "$filename" ]]; then
      AT="${filename%.*}"
      return
    fi
  done < <(find $REPOSITORIES_ROOT -path "$target_path/*.md" -printf "%f\n" | sort -r)

  ###################
  # search in years #
  ###################
  if [[ $REPOSITORY ]]; then
    target_path="$REPOSITORY/*/*"
  else
    target_path="*/*/*"
  fi

  while IFS= read -r filename; do
    if [[ "$current_target_file" > "$filename" ]]; then
      AT="${filename%.*}"
      return
    fi
  done < <(find $REPOSITORIES_ROOT -path "$target_path/*.md" -printf "%f\n" | sort -r)
  
  # Exit if not previous log file found.
  if [ -z "$AT" ]; then
    print_warning "No entries found prior to $(display_date "$current_at")."
    exit 0
  fi
}

# Displays human date in green
# TODO: must find a better way for handling colored output
display_date()
{
  echo $(success_color "$(date --date "$1" +"%A %B %d, %Y")")
}

# Resolves the filename of the stup entry for a specific date at a specific repository
resolve_target_file()
{
  echo "$REPOSITORIES_ROOT/$1/$YEAR/$MONTH/$YEAR-$MONTH-$DAY.md"
}

#####################
# UI Helper methods #
#####################

print_error()
{
  echo -e "${TEXT_RED}$1${TEXT_NORMAL}"
}

print_warning()
{
  echo -e "${TEXT_YELLOW}$1${TEXT_NORMAL}"
}

print_hint()
{
  echo -e "${TEXT_POWDER_BLUE}$1${TEXT_NORMAL}"
}

print_info()
{
  echo -e "${TEXT_BLUE}$1${TEXT_NORMAL}" 
}

print_success()
{
  echo -e "${TEXT_GREEN}$1${TEXT_NORMAL}"
}

success_color()
{
  echo "${TEXT_GREEN}$1${TEXT_NORMAL}"
}

emphasize()
{
  echo "${TEXT_BOLD}$1${TEXT_NORMAL}"
}

# Let's go
stup "$@"; exit